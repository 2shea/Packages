%YAML 1.2
---
# Derived from https://github.com/i-akhmadullin/Sublime-CSS3
name: CSS
file_extensions:
  - css
  - css.erb
scope: source.css
variables:
  # Many variable names taken directly from https://www.w3.org/TR/css3-selectors/#lex
  unicode: '\\\h{1,6}[ \t\n\f]?'
  escape: '(?:{{unicode}}|\\[^\n\f\h])'
  nonascii: '[\p{L}\p{M}\p{S}\p{N}&&[^[:ascii:]]]'
  nmstart: '(?:[[_a-zA-Z]{{nonascii}}]|{{escape}})'
  nmchar: '(?:[[-\w]{{nonascii}}]|{{escape}})'
  ident: '-?{{nmstart}}{{nmchar}}*'

  custom_element_chars: |-
    (?x:
        [-_a-z0-9\xB7]
      | \\\.
      | [\xC0-\xD6]
      | [\xD8-\xF6]
      | [\x{000000F8}-\x{000002FF}]
      | [\x{00000300}-\x{0000037D}]
      | [\x{0000037F}-\x{00001FFF}]
      | [\x{0000200C}-\x{0000200D}]
      | [\x{0000203F}-\x{00002040}]
      | [\x{00002070}-\x{0000218F}]
      | [\x{00002C00}-\x{00002FEF}]
      | [\x{00003001}-\x{0000D7FF}]
      | [\x{0000F900}-\x{0000FDCF}]
      | [\x{0000FDF0}-\x{0000FFFD}]
      | [\x{00010000}-\x{000EFFFF}]
    )

  rgb_decimal_value: '(?:0*(?:(?:2(?:[0-4][0-9]|5[0-5]))|(?:1?[0-9]{1,2})))'

  color_percentage_range: '(?:100|[0-9]{1,2})%'

  color_alpha_value: '(?:\s*,\s*((?:(?:0?\.[0-9]+)|[0-1])))?'

  combinators: '(?:>{1,3}|[~+])'

contexts:
  main:
    - include: comment-block
    - include: selector
    - include: charset
    - include: import
    - include: font-face
    - include: media
    - include: custom-media
    - include: keyframes
    - include: namespace
    - include: page
    - include: property-list
  cascading-variable:
    - match: (var)(\()
      captures:
        1: support.function.var.css
        2: punctuation.section.function.css
      push:
        - meta_scope: support.type.cascading-variable.css
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - match: (--)
          scope: support.constant.custom-property-name.prefix.css
        - match: "(?i)([_a-z]+[_a-z0-9-]*)"
          scope: support.type.variable-name.css
        - match: (,)
          scope: punctuation.definition.arbitrary-repetition.css
        - include: numeric-values
  charset:
    - match: \s*((@)charset\b)\s*
      captures:
        1: keyword.control.at-rule.charset.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.charset.css
        - include: at-rule-punctuation
        - include: literal-string
  color-values:
      # http://www.w3.org/TR/CSS21/syndata.html#value-def-color
    - match: \b(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\b
      scope: support.constant.color.w3c-standard-color-name.css
      # https://www.w3.org/TR/css3-color/#svg-color
    - match: \b(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato|turquoise|violet|wheat|whitesmoke|yellowgreen)\b
      scope: support.constant.color.w3c-extended-color-keywords.css
      # https://www.w3.org/TR/css3-color/#currentcolor and https://www.w3.org/TR/css3-color/#transparent-def
    - match: \b((?i)currentColor|transparent)\b
      scope: support.constant.color.w3c-special-color-keyword.css
    - match: (rgba?)(\()
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.css
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - match: |-
            (?x)
            ({{rgb_decimal_value}})\s*,\s*  # red,
            ({{rgb_decimal_value}})\s*,\s*  # green,
            ({{rgb_decimal_value}})         # blue,
            (?:{{color_alpha_value}})       # alpha
          captures:
            1: constant.other.color.rgb-value.css
            2: constant.other.color.rgb-value.css
            3: constant.other.color.rgb-value.css
            4: constant.other.color.rgb-value.css
        - match: |-
            (?x)
            ({{color_percentage_range}})\s*,\s*  # red,
            ({{color_percentage_range}})\s*,\s*  # green,
            ({{color_percentage_range}})         # blue,
            (?:{{color_alpha_value}})            # alpha
          captures:
            1: constant.other.color.rgb-percentage.css
            2: constant.other.color.rgb-percentage.css
            3: constant.other.color.rgb-percentage.css
            4: constant.other.color.rgb-percentage.css
        - include: numeric-values
    - match: (hsla?)(\()
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.css
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - match: |-
            (?x)
            ((?:-|\+)?
            (?:\d\.\d+(?:e\-\d+)?|\d+))\s*,\s*   # hue
            ({{color_percentage_range}})\s*,\s*  # saturation
            ({{color_percentage_range}})         # lightness
            (?:{{color_alpha_value}})            # alpha
          captures:
            1: constant.other.color.hsl-value.css
            2: constant.other.color.hsl-value.css
            3: constant.other.color.hsl-value.css
            4: constant.other.color.hsl-value.css
        - include: numeric-values
  comment-block:
    - match: /\*
      scope: punctuation.definition.comment.css
      push:
        - meta_scope: comment.block.css
        - match: \*/
          scope: punctuation.definition.comment.css
          pop: true
  custom-media:
    - match: (?=\s*@custom-media\s*.*?)
      push:
        - match: \s*;
          captures:
            1: punctuation.section.property-list.css
          pop: true
        - match: \s*((@)custom-media)(?=.*?)
          captures:
            1: keyword.control.at-rule.custom-media.css
            2: punctuation.definition.keyword.css
            3: support.constant.custom-media.css
          push:
            - meta_scope: meta.at-rule.custom-media.css
            - match: \s*(?=;)
              pop: true
            - include: media-query-list
  font-face:
    - match: '\s*((@)font-face)\s*(?=\{)'
      captures:
        1: keyword.control.at-rule.font-face.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.font-face.css
        - match: '\s*(\})'
          captures:
            1: punctuation.section.property-list.css
          pop: true
        - include: rule-list
  import:
    - match: \s*((@)import\b)\s*
      captures:
        1: keyword.control.at-rule.import.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.import.css
        - include: at-rule-punctuation
        - include: literal-string
        - match: \s*(url)(\()\s*
          captures:
            1: support.function.url.css
            2: punctuation.section.function.css
          push:
            - match: \s*(\))\s*
              captures:
                1: punctuation.section.function.css
              pop: true
            - match: '[^''") \t]+'
              scope: variable.parameter.url.css
            - include: literal-string
        - include: media-query-list
  keyframe-name:
    - match: '(?i)\s*[-]?([_\w\-]*)?'
      captures:
        1: entity.other.animation-name.css
      push:
        - match: '\s*(?:(,)|(?=[{;]))'
          captures:
            1: punctuation.definition.arbitrary-repetition.css
          pop: true
  # https://drafts.csswg.org/css-animations/#keyframes
  keyframes:
    - match: (?=\s*@(?:-webkit-|-moz-|-o-)?keyframes\s*.*?)
      push:
        - match: '\s*(\})'
          captures:
            1: punctuation.section.property-list.css
          pop: true
        - match: \s*((@)(-webkit-|-moz-|-o-)?keyframes)(?=.*?)
          captures:
            1: keyword.control.at-rule.keyframe.css
            2: punctuation.definition.keyword.css
            3: support.type.property-vendor.css
            4: support.constant.keyframe.css
          push:
            - meta_scope: meta.at-rule.keyframe.css
            - match: '\s*(?=\{)'
              pop: true
            - match: '\s*(?=[^{;])'
              push:
                - match: '\s*(?=[{;])'
                  pop: true
                - include: keyframe-name
        - match: '\s*(\{)'
          captures:
            1: punctuation.section.property-list.css
          push:
            - match: '(?=\})'
              pop: true
            - match: '\s*(?:(from|to)|((?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)(%)))\s*,?\s*'
              captures:
                1: keyword.keyframe-selector.css
                2: constant.numeric.css
                3: keyword.other.unit.css
            - include: main
  media:
    - match: (?=\s*@media\s*.*?)
      push:
        - match: '\s*(\})'
          captures:
            1: punctuation.section.property-list.css
          pop: true
        - match: \s*((@)media)(?=.*?)
          captures:
            1: keyword.control.at-rule.media.css
            2: punctuation.definition.keyword.css
            3: support.constant.media.css
          push:
            - meta_scope: meta.at-rule.media.css
            - match: '\s*(?=\{)'
              pop: true
            - include: media-query-list
        - match: '\s*(\{)'
          captures:
            1: punctuation.section.property-list.css
          push:
            - match: '(?=\})'
              pop: true
            - include: main
  media-query:
    # Media Types: https://www.w3.org/TR/CSS21/media.html
    - match: (?i)\s*(only|not)?\s*(all|aural|braille|embossed|handheld|print|projection|screen|speech|tty|tv)?
      captures:
        1: keyword.operator.logic.media.css
        2: support.constant.media.css
      push:
        - match: '\s*(?:(,)|(?=[{;]))'
          captures:
            1: punctuation.definition.arbitrary-repetition.css
          pop: true
        - match: \s*(and)?\s*(\()\s*
          captures:
            1: keyword.operator.logic.media.css
          push:
            - match: \)
              pop: true
            - match: |-
                (?x)
                (
                    (-webkit-|-o-)?
                    ((min|max)-)?
                    (-moz-)?
                    (
                        ((device-)?(height|width|aspect-ratio|pixel-ratio))|
                        (color(-index)?)|monochrome|resolution
                    )
                )|grid|scan|orientation
                \s*(?=[:)])
              captures:
                0: support.type.property-name.media.css
                2: support.type.vendor-prefix.css
                5: support.type.vendor-prefix.css
              push:
                - match: (:)|(?=\))
                  captures:
                    1: punctuation.separator.key-value.css
                  pop: true
            - match: \b(portrait|landscape|progressive|interlace)
              scope: support.constant.property-value.css
            - match: \s*(\d+)(/)(\d+)
              captures:
                1: constant.numeric.css
                2: keyword.operator.arithmetic.css
                3: constant.numeric.css
            - include: numeric-values
  media-query-list:
    - match: '\s*(?=[^{;])'
      push:
        - match: '\s*(?=[{;])'
          pop: true
        - include: media-query
# Namespace At-Rule: https://www.w3.org/TR/css3-namespace/
  namespace:
    - match: \s*((@)namespace)\s+(\b\S*\b)?
      captures:
        1: keyword.control.at-rule.namespace.css
        2: punctuation.definition.keyword.css
        3: entity.other.namespace-prefix.css
      push:
        - meta_scope: meta.at-rule.namespace.css
        - include: at-rule-punctuation
        - include: literal-string
# Page At-Rule: https://www.w3.org/TR/CSS2/page.html
  page:
    - match: '\s*((@)page)\s*(?:(:)(first|left|right))?\s*(?=\{)'
      captures:
        1: keyword.control.at-rule.page.css
        2: punctuation.definition.keyword.css
        3: punctuation.definition.entity.css
        4: entity.other.attribute-name.pseudo-class.css
      push:
        - meta_scope: meta.at-rule.page.css
        - match: '\s*(\})'
          captures:
            1: punctuation.section.property-list.css
          pop: true
        - include: rule-list
  numeric-values:
    - match: '(#)([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\b'
      scope: constant.other.color.rgb-value.css
      captures:
        1: punctuation.definition.constant.css
    - match: |-
        (?x)
            (?:-|\+)?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+))
            ((?:px|pt|ch|cm|deg|dpi|dpcm|dppx|em|ex|in|grad|fr|mm|ms|pc|rad|rem|s|turn|vh|vw|vmin|vmax|x)\b|%)?
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.css
  property-list:
    - match: '(?=\{)'
      push:
        - match: '\}'
          scope: punctuation.section.property-list.css
          pop: true
        - include: rule-list
  property-values:
    - include: vendor-prefix
    - include: repeat-notation
    - match: |-
        (?x)\b(
            absolute|active|add
          | all(-(petite|small)-caps|-scroll)?
          | alpha(betic)?
          | alternate(-reverse)?
          | always|annotation|antialiased|armenian|at
          | auto(hiding-scrollbar)?
          | avoid(-column|-page|-region)?
          | background(-color|-image|-position|-size)?
          | backwards|balance|baseline|below|bevel|bicubic|bidi-override|blink
          | block(-line-height)?
          | blur
          | bold(er)?
          | border(-bottom|-left|-right|-top)?-(color|radius|width|style)
          | border-(bottom|top)-(left|right)-radius
          | border-image(-outset|-repeat|-slice|-source|-width)?
          | border(-bottom|-left|-right|-top|-collapse|-spacing)?
          | both|bottom
          | box(-shadow)?
          | break-(all|word)
          | brightness
          | butt(on)?
          | capitalize
          | cent(er|ral)
          | char(acter-variant)?
          | cjk-ideographic|clip|clone|close-quote
          | closest-(corner|side)
          | col-resize|collapse
          | color(-stop|-burn|-dodge)?
          | column((-count|-gap|-reverse|-rule(-color|-width)?|-width)|s)?
          | common-ligatures|condensed|consider-shifts|contain
          | content(-box|s)?
          | contextual|contrast|cover
          | crisp(-e|E)dges
          | crop
          | cross(hair)?
          | da(rken|shed)
          | decimal(-leading-zero)?
          | default|dense|diagonal-fractions|difference|disabled
          | disc(retionary-ligatures)?
          | disregard-shifts
          | distribute(-all-lines|-letter|-space)?
          | dotted|double|drop-shadow
          | (nwse|nesw|ns|ew|sw|se|nw|ne|w|s|e|n)-resize
          | ease(-in-out|-in|-out)?
          | element|ellipsis|embed|end|EndColorStr|evenodd
          | exclu(de(-ruby)?|sion)
          | expanded
          | (extra|semi|ultra)-(condensed|expanded)
          | farthest-(corner|side)?
          | fill(-box|-opacity)?
          | filter|fixed|flat
          | flex((-basis|-end|-grow|-shrink|-start)|box)?
          | flip|flood-color
          | font(-size(-adjust)?|-stretch|-weight)?
          | forwards
          | from(-image)?
          | full-width|geometricPrecision|georgian|glyphs|gradient|grayscale
          | grid(-height)?
          | groove|hand|hanging|hard-light|hebrew|height|help|hidden|hide
          | (hiragana|katakana)(-iroha)?
          | historical-(forms|ligatures)
          | horizontal(-tb)?
          | hue
          | ideograph(-alpha|-numeric|-parenthesis|-space|ic)
          | inactive|include-ruby|infinite|inherit|initial
          | inline(-block|-box|-flex(box)?|-line-height|-table)?
          | inside
          | inter(-ideograph|-word|sect)
          | invert|isolat(e|ion)|italic
          | jis(04|78|83|90)
          | justify(-all)?
          | keep-all
          | large[r]?
          | last|left|letter-spacing
          | light(e[nr]|ing-color)
          | line(-edge|-height|-through)?
          | linear(-gradient|RGB)?
          | lining-nums|list-item|local|loose
          | lower(-alpha|-greek|-latin|-roman|case)
          | lr-tb|ltr|lumin(osity|ance)|manual
          | margin(-bottom|-box|-left|-right|-top)?
          | marker(-offset|s)?
          | mathematical
          | matrix(3d)?
          | max-(content|height|lines|size|width)
          | medium|middle
          | min-(content|height|width)
          | miter|mixed|move|multiply|newspaper
          | no-(change|clip|(close|open)-quote|(common|discretionary|historical)-ligatures|contextual|drop|repeat)
          | none|nonzero|normal|not-allowed|nowrap|oblique
          | offset(-after|-before|-end|-start)?
          | oldstyle-nums|opacity|open-quote
          | optimize(Legibility|Precision|Quality|Speed)
          | order|ordinal|ornaments
          | outline(-color|-offset|-width)?
          | outset|outside|over(line|-edge|lay)
          | padding(-bottom|-box|-left|-right|-top)?
          | page|painted|paused
          | perspective(-origin)?
          | petite-caps|pixelated|pointer
          | pre(-line|-wrap)?
          | preserve-3d
          | progid:DXImageTransform.Microsoft.(Alpha|Blur|dropshadow|gradient|Shadow)
          | progress
          | proportional-(nums|width)
          | radial-gradient|recto|region|relative
          | repeat(-[xy])?
          | repeating-(linear|radial)-gradient
          | replaced|reset-size|reverse|ridge|right
          | (rotate|scale|translate)(3d|X|Y|Z)?
          | round
          | row(-resize|-reverse)?
          | rtl|ruby|running|saturat(e|ion)|screen
          | scroll(-position|bar)?
          | separate|sepia
          | shape-(image-threshold|margin|outside)
          | show
          | sideways(-lr|-rl)?
          | simplified
          | skew[XY]?
          | slashed-zero|slice
          | small(-caps|er)?
          | smooth|snap|solid|soft-light
          | space(-around|-between)?
          | span|square|sRGB
          | stack(ed-fractions)?
          | start(ColorStr)?
          | static
          | step-(end|start)
          | sticky
          | stop-(color|opacity)
          | stretch|strict
          | stroke(-box|-dash(array|offset)|-miterlimit|-opacity|-width)?
          | style(set)?
          | stylistic
          | sub(grid|pixel-antialiased|tract)?
          | super|swash
          | table(-caption|-cell|(-column|-footer|-header|-row)-group|-column|-row)?
          | tabular-nums|tb-rl
          | text((-bottom|-(decoration|emphasis)-color|-indent|-(over|under)-edge|-shadow|-size(-adjust)?|-top)|field)?
          | thi(ck|n)
          | titling-ca(ps|se)
          | to[p]?
          | touch|traditional
          | transform(-origin)?
          | under(-edge|line)?
          | unicase|unset
          | upper(-alpha|-latin|-roman|case)
          | upright
          | use-(glyph-orientation|script)
          | verso
          | vertical(-align|-ideographic|-lr|-rl|-text)?
          | view-box
          | viewport-fill(-opacity)?
          | visibility
          | visible(Fill|Painted|Stroke)?
          | wait|wavy|weight|whitespace|width|word-spacing
          | wrap(-reverse)?
          | x{1,2}-(large|small)
          | z-index|zero
          | zoom(-in|-out)?
        )\b
      scope: support.constant.property-value.css
      # can be either keywords or functions, therefore slightly more strict matching
    - match: \b(circle|ellipse|inset)(?!\()\b
      scope: support.constant.property-value.css
      # Generic Font Families: https://www.w3.org/TR/CSS2/fonts.html
    - match: (\b(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace|fantasy|cursive)\b)
      scope: support.constant.font-name.css
    - include: unicode-range
    - include: numeric-values
    - include: color-values
    - include: literal-string
    - match: (rect)(\()
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.css
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - include: numeric-values
    - include: cascading-variable
    - match: (cubic-bezier|steps)(\()
      captures:
        1: support.function.timing-function.css
        2: punctuation.section.function.css
      push:
        - meta_scope: support.type.function.easing.css
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - match: (,)+
          scope: punctuation.section.function.css
        - include: numeric-values
        - match: (end|start)+
          scope: support.keyword.timing-direction.css
    - match: (circle|ellipse|inset|polygon)(\()
      captures:
        1: support.function.shape.css
        2: punctuation.section.function.css
      push:
        - meta_scope: support.type.shape.definition.css
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - include: numeric-values
        - match: (,)
          scope: punctuation.definition.arbitrary-repetition.css
        - match: |-
            \b(?x)(
            at|
            bottom|
            center|closest-side|
            evenodd|
            farthest-side|
            left|
            nonzero|
            right|round|
            top)\b
          scope: support.constant.property-value.css
    - match: (calc)(\()
      captures:
        1: support.function.calc.css
        2: punctuation.section.function.css
      push:
        - meta_scope: support.type.expression.calc.css
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - match: "[()]"
          scope: punctuation.section.function.css
        - include: cascading-variable
        - include: numeric-values
        - match: "[-/*+]"
          scope: punctuation.operator.function.css
    - match: (attr|counter|counters|cross-fade|format|image-set|image|local|minmax|url)(\()
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.css
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - match: (?:min|max)-content
          scope: support.constant.property-value.css
        - include: literal-string
        - include: numeric-values
        - include: color-values
        - match: '[^''") \t]+'
          scope: variable.parameter.misc.css
    - match: \!\s*important
      scope: keyword.other.important.css
  repeat-notation:
    - match: (repeat)(\()
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.css
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.css
          pop: true
        - match: (?:min|max)-content
          scope: support.constant.property-value.css
        - include: literal-string
        - include: numeric-values
        - match: '[^''") \t]+'
          scope: variable.parameter.misc.css
  rule-list:
    - match: '\{'
      scope: punctuation.section.property-list.css
      push:
        - meta_scope: meta.property-list.css
        - match: '(?=\s*\})'
          pop: true
        - include: rule-list-body
  rule-list-body:
    - include: comment-block
    - match: "(?=[-a-z])"
      push:
        - meta_scope: meta.property-name.css
        - match: "$|(?![-a-z])"
          pop: true
        - include: vendor-prefix
        - match: '\b(var-)(?i)([_a-z]+[_a-z0-9-]*)'
          captures:
            1: keyword.other.custom-property.prefix.css
            2: support.type.custom-property.name.css
          push:
            - meta_scope: invalid.deprecated.custom-property.css
            - match: \b
              pop: true
        - match: "(?i)(--)([_a-z]+[_a-z0-9-]*)"
          captures:
            1: keyword.other.custom-property.prefix.css
            2: support.type.custom-property.name.css
          push:
            - meta_scope: support.type.custom-property.css
            - match: \b
              pop: true
        - match: |-
            \b(?x)(
                align(-content|-items|-self)?
              | alignment-(adjust|baseline)
              | all
              | animation(-delay|-direction|-duration|-fill-mode|-iteration-count|-name|-play-state|-timing-function)?
              | appearance|azimuth|backface-visibility
              | background(-attachment|-blend-mode|-clip|-color|-image|-origin|-position|-repeat|-size)?
              | baseline-shift|behavior
              | border(-bottom|-left|-right|-top)?-(color|radius|width|style)
              | border-(bottom|top)-(left|right)-radius
              | border-image(-outset|-repeat|-slice|-source|-width)?
              | border(-bottom|-left|-right|-top|-collapse|-spacing)?
              | bottom
              | box-(align|decoration-break|direction|flex|ordinal-group|orient|pack|shadow|sizing)
              | break-(after|before|inside)
              | caption-side|clear
              | clip(-path|-rule)?
              | color(-interpolation(-filters)?|-profile|-rendering)?
              | column((-count|-fill|-gap|-rule(-color|-style|-width)?|-span|-width)|s)?
              | content
              | counter-(increment|reset)
              | cue(-after|-before)?
              | cursor|direction|display|dominant-baseline|elevation|empty-cells
              | fill(-rule)?
              | filter
              | flex((-item)?-align|-basis|-direction|-flow|-grow|(-line)?-pack
                |-negative|-order|-positive|-preferred-size|-shrink|-wrap)?
              | float|flood-color
              | font-emphasize(-position|-style)?
              | font-variant(-alternates|-caps|-east-asian|-ligatures|-numeric|-position)?
              | font(-effect|-family|-feature-settings|-kerning|-language-override
                |-size(-adjust)?|-smoothing|-stretch|-style|-synthesis|-weight)?
              | force-broken-image-icon
              | grid-area
              | grid-auto-(columns|flow|rows)
              | grid-(column|row)(-end|-start)?
              | grid-template(-areas|-columns|-rows)?
              | group|height|hyphens
              | image-(orientation|rendering|resolution)
              | ime-mode
              | initial-letter(-align)?
              | inline-(box-align|flex)
              | interpolation-mode|isolation|justify-content|kerning|left|letter-spacing|lighting-color
              | line-(box-contain|clamp|height|stacking(-ruby|-shift|-strategy)?)
              | list-style(-image|-position|-type)?
              | margin(-bottom|-left|-right|-top)?
              | marker-(end|mid|offset|start)
              | marks
              | mask-border(-mode|-outset|-repeat|-slice|-source|-width)?
              | mask(-clip|-composite|-image|-mode|-origin|-position|-repeat|-size|-type)?
              | (max|min)-(height|width)
              | mix-blend-mode
              | nbsp-mode
              | object-(fit|position)
              | opacity|order|orphans|osx-font-smoothing
              | outline(-color|-offset|-style|-width)?
              | overflow(-scrolling|-wrap|-x|-y)?
              | padding(-bottom|-left|-right|-top)?
              | page(-break-(after|before|inside))?
              | paint-order
              | pause(-after|-before)?
              | perspective(-origin)?
              | pitch(-range)?
              | play-during|pointer-events|position|quotes|resize|richness|right|scroll-behavior
              | shape-(image-threshold|margin|outside|rendering)
              | size
              | speak(-header|-numeral|-punctuation)?
              | speech-rate|src|stop-color|stress
              | stroke(-dasharray|-line(cap|join))?
              | tab-size|table-layout|tap-highlight-color
              | text-align(-last)?
              | text-decoration(-color|-line|-style)?
              | text-emphasis(-color|-position|-style)?
              | text-(anchor|fill-color|height|indent|justify|orientation|overflow
                |rendering|shadow|size-adjust|transform|underline-position)
              | top
              | touch-(action|callout)
              | transform(-origin(-[xy])?|-style)?
              | transition(-delay|-duration|-property|-timing-function)?
              | unicode-(bidi|range)
              | user-select|vertical-align|visibility|voice-family|volume|white-space|widows|width|will-change
              | word-(break|spacing|wrap)
              | writing-mode|z-index|zoom
            )\b
          scope: support.type.property-name.css
    - match: (:)\s*
      captures:
        1: punctuation.separator.key-value.css
      push:
        - meta_scope: meta.property-value.css
        - match: '\s*(;|(?=\}))'
          captures:
            1: punctuation.terminator.rule.css
          pop: true
        - include: property-values
  selector:
    - match: '\s*(?=[:.*#a-zA-Z\[])'
      push:
        - meta_scope: meta.selector.css
        - match: "(?=[/@{)])"
          pop: true
          # Custom Elements: http://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        - match: '\b([a-z](?:{{custom_element_chars}})*-(?:{{custom_element_chars}})*)\b'
          scope: entity.name.tag.custom.css
        - match: '\b(a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|content|data|datalist|dd|del|details|dfn|dir|dialog|div|dl|dt|element|em|embed|eventsource|fieldset|figure|figcaption|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i|iframe|img|input|ins|isindex|kbd|keygen|label|legend|li|link|main|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|pre|progress|q|rp|rt|rtc|s|samp|script|section|select|shadow|small|source|span|strike|strong|style|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|xmp|circle|clipPath|defs|ellipse|filter|foreignObject|g|glyph|glyphRef|image|line|linearGradient|marker|mask|path|pattern|polygon|polyline|radialGradient|rect|stop|switch|symbol|text|textPath|tref|tspan|use)\b'
          scope: entity.name.tag.css
          # https://drafts.csswg.org/selectors-4/#class-html
        - match: '(\.){{ident}}'
          scope: entity.other.attribute-name.class.css
          captures:
            1: punctuation.definition.entity.css
          # https://drafts.csswg.org/selectors-4/#id-selectors
        - match: "(#){{ident}}"
          scope: entity.other.attribute-name.id.css
          captures:
            1: punctuation.definition.entity.css
        - match: \*
          scope: entity.name.tag.wildcard.css
          # Combinators
          # https://drafts.csswg.org/selectors-4/#combinators
          # https://drafts.csswg.org/css-scoping/#deep-combinator
        - match: '({{combinators}})(?![>~+])'
          scope: punctuation.separator.combinator.css
        - match: '({{combinators}}){2,}'
          scope: invalid.illegal.combinator.css
        - match: (:)((active|valid)-drop-target)\b
          scope: entity.other.attribute-name.pseudo-class.drag-and-drop.css
          captures:
            1: punctuation.definition.entity.css
        - match: (:)(checked|enabled|default|disabled|indeterminate|invalid|in-range|optional|out-of-range|placeholder-shown|required|read-only|read-write|user-error|valid)\b
          scope: entity.other.attribute-name.pseudo-class.ui-state.css
          captures:
            1: punctuation.definition.entity.css
        - match: (:)((nth-(last-)?)?column)\b
          scope: entity.other.attribute-name.pseudo-class.grid-structural.css
          captures:
            1: punctuation.definition.entity.css
        - match: |-
            (?x)(:{1,2})
            (?:after|before|first-letter|first-line|placeholder|selection|

              (-moz-)(?:
                button-content|color-swatch|
                focus-(?:inner|outer)|
                list-(?:bullet|number)|
                meter-(?:bar|optimum|sub-optimum|sub-sub-optimum)|
                number-(?:spin-(?:box|down|up))|
                page(?:-sequence)?|
                placeholder|progress-bar|
                range-(?:progress|thumb|track)|
                scrolled-page-sequence|selection|
                tree-(?:cell-text|cell|checkbox|column|drop-feedback|image|
                  indentation|line|progressmeter|row|separator|twisty)
              )|

              (-ms-)(?:
                browse|check|clear|expand|fill(?:-lower|-upper)?|
                input-placeholder|reveal|thumb|ticks-(?:after|before)|tooltip|
                track|value
              )|

              (-webkit-)(?:
                appearance|autofill|calendar-picker-indicator|clear-button|
                color-swatch(?:-wrapper)?|
                datetime-edit(?:-(?:ampm-field|day-field|fields-wrapper|
                  hour-field|millisecond-field|minute-field|month-field|
                  second-field|text|week-field|year-field))?|
                details-marker|file-upload-button|
                (?:inner|outer)-spin-button|
                input-(?:list-button|placeholder|speech-button)|
                keygen-select|
                media-controls(?:-(?:current-time-display|enclosure|
                  fullscreen-button|mute-button|overlay-enclosure|panel|
                  play-button|time-remaining-display|timeline|
                  toggle-closed-captions-button|volume-slider))?|
                meter-(?:bar|even-less-good-value|inner-element|optimum-value|
                  suboptimal-value|suboptimum-value)|
                progress-(?:bar-value|bar|inner-element|value)|
                resizer|
                scrollbar(?:-(?:button|corner|thumb|track-piece|track))?|
                search-(?:cancel-button|decoration|results-button|results-decoration)|
                slider-(?:container|runnable-track|thumb)|
                textfield-decoration-container
              )
            )
            \b
          scope: entity.other.attribute-name.pseudo-element.css
          captures:
            1: punctuation.definition.entity.css
            2: support.type.vendor-prefix.css
            3: support.type.vendor-prefix.css
            4: support.type.vendor-prefix.css
        - match: (:)(current|(first|last)-child|(first|last|nth|only)-of-type|backdrop|empty|first|future|left|only-child|past|right|root|scope|target|active|any-link|hover|local-link|link|visited|focus)\b
          scope: entity.other.attribute-name.pseudo-class.css
          captures:
            1: punctuation.definition.entity.css
        - match: ((:)dir|lang|matches|not|nth-(?:last-)?match)(\()
          captures:
            1: entity.other.attribute-name.pseudo-class.css
            2: punctuation.definition.entity.css
            3: punctuation.section.function.css
          push:
            - match: \)
              scope: punctuation.section.function.css
              pop: true
            - include: selector
        - match: ((:)nth-(?:(?:last-)?child|(?:last-)?of-type))(\()(\-?(?:\d+n?|n)(?:\+\d+)?|even|odd)(\))
          captures:
            1: entity.other.attribute-name.pseudo-class.css
            2: punctuation.definition.entity.css
            3: punctuation.section.function.css
            4: constant.numeric.css
            5: punctuation.section.function.css
        # Attribute Selectors
        # https://drafts.csswg.org/selectors-4/#attribute-selectors
        - match: '\['
          scope: punctuation.definition.entity.css
          push:
            - meta_scope: meta.attribute-selector.css
            - match: '(?:(-?[_a-z][_a-z0-9-]*)|(\*))?([|])(?!=)'
              captures:
                1: entity.other.namespace-prefix.css
                2: entity.name.namespace.wildcard.css
                3: punctuation.separator.namespace.css
            - match: '[^\\ =<>`~*|^$\]\[]+'
              scope: entity.other.attribute-name.css
            - match: '\s*([~*|^$]?=)\s*'
              captures:
                1: keyword.operator.attribute-selector.css
              push:
                - match: '[^\s\]\[''"]'
                  scope: string.unquoted.css
                - include: literal-string
                - match: '(?=(\s|\]))'
                  pop: true
            - match: '(?:\s+([iI]))?'  # case insensitive flag
              captures:
                1: keyword.other.css
            - match: '\]'
              scope: punctuation.definition.entity.css
              pop: true
  unicode-range:
    - match: |-
        (?xi)
            (u\+)
            ([0-9a-f?]{1,6}
            (?:(-)[0-9a-f]{1,6})?)
      scope: support.unicode-range.css
      captures:
        1: support.constant.unicode-range.prefix.css
        2: constant.codepoint-range.css
        3: punctuation.section.range.css
  vendor-prefix:
    - match: "-(?:webkit|moz|ms|o)-"
      scope: support.type.vendor-prefix.css
  at-rule-punctuation:
    - match: \;
      scope: punctuation.terminator.rule.css
    - match: (?=;|$)
      pop: true

  literal-string:
    - match: "'"
      scope: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.single.css
        - match: (')|(\n)
          captures:
            1: punctuation.definition.string.end.css
            2: invalid.illegal.newline.css
          pop: true
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.double.css
        - match: (")|(\n)
          captures:
            1: punctuation.definition.string.end.css
            2: invalid.illegal.newline.css
          pop: true
        - include: string-content

  string-content:
    - match: \\\s*\n
      scope: constant.character.escape.newline.css
    - match: '\\(\h{1,6}|.)'
      scope: constant.character.escape.css
