%YAML 1.2
---
name: XML
file_extensions:
  - xml
  - xsd
  - xslt
  - tld
  - dtml
  - rss
  - opml
  - svg
first_line_match: '^<\?xml '
scope: text.xml
variables:
  # This is the full XML Name production, but should not be used where namespaces
  # are possible. Those locations should use a qualified_name.
  name: '[[:alpha:]:_][[:alnum:]:_.-]*'
  # This is the form that allows a namespace prefix (ns:) followed by a local
  # name. The captures are:
  #  1: namespace prefix name
  #  2: namespace prefix colon
  #  3: local tag name
  qualified_name: '(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)'

contexts:
  main:
    - match: '(<\?)\s*({{qualified_name}})'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
      push:
        - meta_scope: meta.tag.preprocessor.xml
        - match: (\?>)
          captures:
            1: punctuation.definition.tag.end.xml
          pop: true
        - match: " ([a-zA-Z-]+)"
          scope: entity.other.attribute-name.xml
        - include: doublequotedString
        - include: singlequotedString
    - match: '(<!)(DOCTYPE)\s+({{name}})'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.doctype.xml
        3: variable.documentroot.xml
      push:
        - meta_scope: meta.tag.sgml.doctype.xml
        - match: \s*(>)
          captures:
            1: punctuation.definition.tag.end.xml
          pop: true
        - include: internalSubset
    - match: "<!--"
      captures:
        0: punctuation.definition.comment.xml
      push:
        - meta_scope: comment.block.xml
        - match: "-->"
          pop: true
    - match: '(<)({{qualified_name}})(?=(\s[^>]*)?></\2>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        3: entity.name.tag.namespace.xml
        4: entity.name.tag.xml punctuation.separator.namespace.xml
        5: entity.name.tag.localname.xml
      push:
        - meta_scope: meta.tag.no-content.xml
        - match: "(>)(<)(/){{qualified_name}}(>)"
          captures:
            1: punctuation.definition.tag.end.xml
            2: punctuation.definition.tag.begin.xml meta.scope.between-tag-pair.xml
            3: punctuation.definition.tag.begin.xml
            4: entity.name.tag.namespace.xml
            5: entity.name.tag.xml punctuation.separator.namespace.xml
            6: entity.name.tag.localname.xml
            7: punctuation.definition.tag.end.xml
          pop: true
        - include: tagStuff
    - match: "(</?){{qualified_name}}"
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.namespace.xml
        3: entity.name.tag.xml punctuation.separator.namespace.xml
        4: entity.name.tag.localname.xml
      push:
        - meta_scope: meta.tag.xml
        - match: (/?>)
          captures:
            1: punctuation.definition.tag.end.xml
          pop: true
        - include: tagStuff
    - include: entity
    - include: bare-ampersand
    - match: '<!\[CDATA\['
      captures:
        0: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.unquoted.cdata.xml
        - match: "]]>"
          captures:
            0: punctuation.definition.string.end.xml
          pop: true
  EntityDecl:
    - match: '(<!)(ENTITY)\s+(%\s+)?({{name}})(\s+(?:SYSTEM|PUBLIC)\s+)?'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.entity.xml
        3: punctuation.definition.entity.xml
        4: variable.entity.xml
        5: keyword.entitytype.xml
      push:
        - match: (>)
          captures:
            1: punctuation.definition.tag.end.xml
          pop: true
        - include: doublequotedString
        - include: singlequotedString
  bare-ampersand:
    - match: "&"
      scope: invalid.illegal.bad-ampersand.xml
  doublequotedString:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.quoted.double.xml
        - match: '"'
          captures:
            0: punctuation.definition.string.end.xml
          pop: true
        - include: entity
        - include: bare-ampersand
  entity:
    - match: '(&)({{name}}|#[0-9]+|#x\h+)(;)'
      scope: constant.character.entity.xml
      captures:
        1: punctuation.definition.constant.xml
        3: punctuation.definition.constant.xml
  internalSubset:
    - match: '(\[)'
      captures:
        1: punctuation.definition.constant.xml
      push:
        - meta_scope: meta.internalsubset.xml
        - match: '(\])'
          pop: true
        - include: EntityDecl
        - include: parameterEntity
  parameterEntity:
    - match: "(%)({{name}})(;)"
      scope: constant.character.parameter-entity.xml
      captures:
        1: punctuation.definition.constant.xml
        3: punctuation.definition.constant.xml
  singlequotedString:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.quoted.single.xml
        - match: "'"
          captures:
            0: punctuation.definition.string.end.xml
          pop: true
        - include: entity
        - include: bare-ampersand
  tagStuff:
    - match: " {{qualified_name}}="
      captures:
        1: entity.other.attribute-name.namespace.xml
        2: entity.other.attribute-name.xml punctuation.separator.namespace.xml
        3: entity.other.attribute-name.localname.xml
    - include: doublequotedString
    - include: singlequotedString
