%YAML 1.2
---
name: Regular Expression
comment: Matches PCRE's regexp syntax, used in various languages and in
  Sublime Text for the Find panels
file_extensions:
  - re
scope: source.regexp
variables:
  known_char_escape: '\\(?:[tnrfae]|[0-7]{3}|x\{\h{1,7}\}|x\h\h|c\d+)'
  invalid_char_escape: '\\[xcCM]'
  char_escape: '\\.'

contexts:
  main:
    - include: character-class
    - include: special-escaped-char
    - include: backslashes
    - include: escaped-char
    - include: charset
    - include: group
    - include: operators

  group:
    - match: \(
      scope: keyword.control.group.regexp
      push:
        - meta_scope: meta.group.regexp
        - match: '\?(<[=!]|>|=|:|!)'
          scope: constant.other.assertion.regexp
          set: group-body
        - match: '\?#'
          scope: meta.group.regexp comment.line.number-sign.regexp
          set:
            - meta_content_scope: meta.group.regexp comment.line.number-sign.regexp
            - match: \)
              scope: meta.group.regexp keyword.control.group.regexp
              pop: true
        - match: ''
          set: group-body

  group-body:
    - meta_scope: meta.group.regexp
    - match: \)
      scope: keyword.control.group.regexp
      pop: true
    - include: main

  charset:
    - match: '(\[\^?)]?'
      captures:
        1: keyword.control.set.regexp
      push:
        - match: ':(ascii|alnum|alpha|blank|cntrl|digit|graph|lower|print|punct|space|upper|word|xdigit):'
          scope: constant.other.posix-class.regexp
        - match: '\]'
          scope: keyword.control.set.regexp
          pop: true
        - match: '(?=({{known_char_escape}}|\\.|[^\]])-({{known_char_escape}}|\\.|[^\]]))'
          push:
            - meta_content_scope: constant.other.range.regexp
            - include: special-escaped-char
            - include: escaped-char
            - match: '(?=-)'
              set:
                - meta_scope: constant.other.range.regexp
                - match: '-'
                - match: '{{known_char_escape}}'
                  scope: constant.character.escape.regexp
                  pop: true
                - match: '{{invalid_char_escape}}'
                  scope: invalid.illegal.character.escape.regexp
                  pop: true
                - match: '{{char_escape}}'
                  scope: constant.character.escape.regexp
                  pop: true
                - match: '.'
                  pop: true
        - include: character-class
        - include: special-escaped-char
        - include: escaped-char
        - include: charset
        - match: '&&'
          scope: keyword.operator.intersection.regexp

  character-class:
    - match: '\\[wWsSdDhHvVXR]'
      scope: keyword.control.character-class.regexp
    - match: '\\[pP]\{[a-zA-Z_]+\}'
      scope: keyword.control.character-class.regexp
    - match: '\\[pP](L&|[A-Z][a-z]?)'
      scope: keyword.control.character-class.regexp

  special-escaped-char:
    - match: '{{known_char_escape}}'
      scope: constant.character.escape.regexp
    - match: '{{invalid_char_escape}}'
      scope: invalid.illegal.character.escape.regexp

  escaped-char:
    - match: '{{char_escape}}'
      scope: constant.character.escape.regexp

  backslashes:
    - match: '\\[bBAZzG]|[\^$]'
      scope: keyword.control.anchors.regexp
    - match: '\\[QEK]'
      scope: keyword.control.regexp
    - match: \\([kg]<\w+>|[kg]'\w+')
      scope: keyword.other.backref-and-recursion.regexp
    - match: \\[1-9]\d*
      scope: keyword.other.backref-and-recursion.regexp

  operators:
    - match: '([?*+][?+]?)|\{\d+(,\d*)?\}'
      scope: keyword.operator.quantifier.regexp
    - match: \|
      scope: keyword.operator.regexp
