# SYNTAX TEST "Packages/YAML/YAML.sublime-syntax"
# <- source.yaml comment

# http://yaml.org/spec/1.2/spec.html#style/block/


##############################################################################
## Scalars
# http://yaml.org/spec/1.2/spec.html#style/block/scalar

# Headers ############################
# (note that block scalars may be empty)
- |
# ^ punctuation.definition.block.scalar.literal

- >
# ^ punctuation.definition.block.scalar.folded

- >1
# ^ punctuation.definition.block.scalar
#  ^ constant.numeric.indentation-indicator

- |1-
# ^ punctuation.definition.block.scalar
#  ^ constant.numeric.indentation-indicator
#   ^ support.other

# Headers and content ################
- |
 literal
#^ string.unquoted.block

- >1
  folded
# ^ string.unquoted.block

- |+
 keep
#^ string.unquoted.block

- >1-
  strip
# ^ string.unquoted.block

- >
  # content
   # still content
 # not content
#^ comment

- >
  content
   # still content
# ^ string.unquoted.block
#  ^ string.unquoted.block

# Empty blocks #######################
- ># not comment
#  ^ invalid.illegal.expected-comment-or-newline

- |
plain
# <- -string.unquoted.block


##############################################################################
## Sequence
# http://yaml.org/spec/1.2/spec.html#style/block/sequence

-
# <- punctuation.definition.block.sequence.item
- -
# <- punctuation.definition.block.sequence.item
# ^ punctuation.definition.block.sequence.item
- !!omap -
# <- punctuation.definition.block.sequence.item
#        ^ punctuation.definition.block.sequence.item
-


##############################################################################
## Mapping
# http://yaml.org/spec/1.2/spec.html#style/block/mapping

key: value
# <- string.unquoted.plain.out entity.name.tag
#  ^ punctuation.separator.mapping.key-value, -entity
:
# <- punctuation.separator.mapping.key-value

? explicit key # Empty value
# <- meta.block-mapping punctuation.definition.key-value.begin
# ^ meta.block-mapping string

? |
  block key
# ^ meta.block-mapping string.unquoted.block
# ^ -meta.block-mapping meta.block-mapping
: - one # Explicit compact
# <- meta.block-mapping punctuation.separator.mapping.key-value
  - two: :three # block value
# ^ punctuation.definition.block.sequence
#   ^ string.unquoted.plain.out entity.name.tag
#      ^ punctuation.separator.mapping.key-value
#        ^ string.unquoted.plain.out

? a key : not a value
#       ^ meta.block-mapping invalid.illegal.expected-newline

scalar
# <- -meta.block-mapping
