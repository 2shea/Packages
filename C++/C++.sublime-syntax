%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C++
comment: I don't think anyone uses .hp. .cp tends to be paired with .h. (I could be wrong. :) -- chris
file_extensions:
  - cpp
  - cc
  - cp
  - cxx
  - c++
  - C
  - h
  - hh
  - hpp
  - hxx
  - h++
  - inl
  - ipp
first_line_match: '-\*- C\+\+ -\*-'
scope: source.c++
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  path: '(?:::)?(?:{{identifier}}::)*{{identifier}}'
  operator_method_name: '\boperator\s*(?:[-+*/%Ë†&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\|\||\+\+|--|,|->\*?|\(\)|\[\])'
  casts: 'const_cast|dynamic_cast|reinterpret_cast|static_cast'
  operator_keywords: 'and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq|noexcept'
  control_keywords: 'break|case|catch|continue|default|do|else|for|goto|if|_Pragma|return|switch|throw|try|while'
  memory_operators: 'new|delete'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum\s+class|enum\s+struct|enum|class'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|export|extern|friend|explicit|virtual|register|thread_local|{{declspec}}'
  type_qualifier: 'const|constexpr|mutable|typename|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  visibility_modifiers: 'private|protected|public'
  other_keywords: 'typedef|decltype|nullptr|operator|{{visibility_modifiers}}|static_assert|sizeof|using|typeid|alignof|alignas|namespace|template'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'decltype|sizeof|static_assert|alignof|alignas|typeid'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: comments
    - include: keywords-angle-brackets
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: generic-type
    - include: members
    - include: operators
    - include: strings
    - include: parens
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.c++
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.c++

  late-expressions:
    # This is highlighted after all of the other control keywords
    # to allow operator overloading to be lexed properly
    - match: \boperator\b
      scope: keyword.control.c++
    - include: modifiers
    - include: types
    - include: function-call

  comments:
    - include: scope:source.c#comments

  operators:
    - include: scope:source.c#operators

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.c++
    - include: scope:source.c#modifiers

  variables:
    - match: \bthis\b
      scope: variable.language.c++
    - match: '\b(f|m)[A-Z]\w*\b'
      comment: common C++ instance var naming idiom -- fMemberName
      scope: variable.other.readwrite.member.c++
    - match: '\bm_[[:alnum:]_]+\b'
      comment: common C++ instance var naming idiom -- fMemberName
      scope: variable.other.readwrite.member.c++
    - include: scope:source.c#variables

  constants:
    - match: \bnullptr\b
      scope: constant.language.c++
    - include: scope:source.c#constants

  keywords:
    - match: \busing\b
      scope: keyword.control.c++
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c++
    - match: '\bdelete\b(\s*\[\])?|\bnew\b(?!])'
      scope: keyword.control.c++
    - match: \b({{operator_keywords}})\b
      scope: keyword.operator.c++
    - include: scope:source.c#keywords

  keywords-angle-brackets:
    - match: \b({{casts}})\b\s*
      scope: keyword.operator.cast.c++
      push:
        - match: '>'
          scope: punctuation.definition.generic.end.c++
          pop: true
        - match: '<'
          scope: punctuation.definition.generic.begin.c++
          push:
            - match: '(?=>)'
              pop: true
            - include: expressions

  keywords-parens:
    - match: '\b(alignof|typeid)\b\s*(\()'
      captures:
        1: keyword.operator.c++
        2: punctuation.definition.parameters.c++
      push:
        - match: '\)'
          scope: punctuation.definition.parameters.c++
          pop: true
        - include: expressions
    - match: '\b(alignas)\b\s*(\()'
      captures:
        1: storage.modifier.c++
        2: punctuation.definition.parameters.c++
      push:
        - match: '\)'
          scope: punctuation.definition.parameters.c++
          pop: true
        - include: expressions
    - include: typedef
    - include: attribute
    - match: '\b(static_assert)\b\s*(\()'
      captures:
        1: keyword.operator.c++
        2: punctuation.definition.parameters.c++
      push:
        - match: '\)'
          scope: punctuation.definition.parameters.c++
          pop: true
        - include: expressions
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.sizeof.c++
        2: punctuation.definition.parameters.c++
      push:
        - match: '\)'
          scope: punctuation.definition.parameters.c++
          pop: true
        - include: expressions

  types:
    - match: \b(char16_t|char32_t|wchar_t|nullptr_t)\b
      scope: storage.type.c++
    - match: '\b(decltype)\b\s*(\()'
      captures:
        1: storage.type.c++
        2: punctuation.definition.parameters.c++
      push:
        - match: '\)'
          scope: punctuation.definition.parameters.c++
          pop: true
        - include: expressions
    - include: scope:source.c#types

  strings:
    - match: '((?:L|u8|u|U)?R)("([^\(\)\\ ]{0,16})\()'
      captures:
        1: storage.type.string.c++
        2: punctuation.definition.string.begin.c++
      push:
        - meta_scope: string.quoted.double.c++
        - match: '\)\3"'
          scope: punctuation.definition.string.end.c++
          pop: true
    - include: scope:source.c#strings

  numbers:
    - match: |-
        (?x)
        (?:
        # floats
          (?:
          (?:\b\d(?:[\d']*\d)?\.\d(?:[\d']*\d)?|\B\.\d(?:[\d']*\d)?)(?:[Ee][+-]?\d(?:[\d']*\d)?)?(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b
          |
          (?:\b\d(?:[\d']*\d)?\.)(?:\B|(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))\b|(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b)
          |
          \b\d(?:[\d']*\d)?(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b
          )
        |
        # ints
          \b(?:
          (?:
          # dec
          [1-9](?:[\d']*\d)?
          |
          # oct
          0(?:[0-7']*[0-7])?
          |
          # hex
          0[Xx][\da-fA-F](?:[\da-fA-F']*[\da-fA-F])?
          |
          # bin
          0[Bb][01](?:[01']*[01])?
          )
          # int suffixes
          (?:(?:l{1,2}|L{1,2})[uU]?|[uU](?:l{0,2}|L{0,2})|(?:i[fl]?|h|min|[mun]?s|_\w*))?)\b
        )
        (?!\.) # Number must not be followed by a decimal point
      scope: constant.numeric.c++
    - include: scope:source.c#numbers

  namespace:
    - match: '^\s*(using)\s+(namespace)\s+({{path}});'
      captures:
        1: keyword.control.c++
        2: keyword.control.c++
    - match: '\b(namespace)\s+({{path}})?(?!\s*(;|,))'
      captures:
        1: keyword.control.c++
        2: entity.name.namespace.c++
      push:
        - meta_scope: meta.namespace-block.c++
        - match: =
          scope: keyword.operator.alias.c++
        - include: scope:source.c#attribute
        - match: ';'
          pop: true
        - match: '\}'
          scope: punctuation.definition.block.c++
          pop: true
        - match: '\{'
          scope: punctuation.definition.block.c++
          push:
            - match: '(?=\})'
              pop: true
            - include: global

  template:
    - match: \b(template)\b\s*(<)
      captures:
        1: storage.type.template.c++
        2: punctuation.definition.generic.begin.c++
      push:
        - meta_scope: meta.template.c++
        # Exit the template scope if we hit some basic invalid characters.
        # This helps when a user is in the middle of typing their template
        # types and prevents re-highlighting the whole file until the next >
        # is found.
        - match: '(?=[{};])'
          pop: true
        - match: '(>)\s*'
          captures:
            1: punctuation.definition.generic.end.c++
          pop: true
        - match: '\b(typename|{{before_tag}})\b'
          scope: storage.type.c++
        - include: types
        - include: scope:source.c#type
        - match: ','
          scope: punctuation.separator.c++
        - match: '\.\.\.'
          scope: punctuation.definition.variadic.c++

  generic-type:
    - match: |-
        (?x:
          (?!template){{path}}
          \s*
          (<)
          (?=
            # First type
            \s*
            (
              (({{modifiers}})\s+)*
              {{path}}
              (<.*>)?
              \s*
              (
                [*&]
                (\s+({{modifiers}}))*
              )?
              |
              # Allow non-type (integer) params
              \d+
            )
            \s*
            # Subsequent types
            (
              \s*
              ,
              \s*
              (
                (({{modifiers}})\s+)*
                {{path}}
                (<.*>)?
                \s*
                (
                  [*&]
                  (\s+({{modifiers}}))*
                )?
                |
                # Allow non-type (integer) params
                \d+
              )
              \s*
            )*
            >
          )
        )
      captures:
        1: punctuation.definition.generic.begin.c++
      push:
        - match: ">"
          scope: punctuation.definition.generic.end.c++
          pop: true
        - include: angle-brackets
        - include: expressions

  angle-brackets:
    - match: <
      scope: punctuation.definition.generic.begin.c++
      push:
        - meta_scope: meta.angle-brackets.c++
        - match: ">"
          scope: punctuation.definition.generic.end.c++
          pop: true
        - include: angle-brackets
        - include: expressions

  block:
    - match: '\{'
      scope: punctuation.definition.block.c++
      push:
        - meta_scope: meta.block.c++
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.definition.block.c++
          pop: true
        - include: statements

  function-call:
    - match: (?=(?!{{non_func_keywords}}){{path}}\s*\()
      push:
        - meta_scope: meta.function-call.c++
        - include: scope:source.c#c99
        - match: '(::)?{{identifier}}(::)'
          captures:
            1: punctuation.accessor.c++
            2: punctuation.accessor.c++
        - match: '(::)?({{identifier}})'
          captures:
            1: punctuation.accessor.c++
            2: variable.function.c++
        - match: '\('
          scope: punctuation.definition.parameters.c++
          set:
            - meta_scope: meta.function-call.c++
            - match: '\)'
              scope: punctuation.definition.parameters.c++
              pop: true
            - include: expressions

  members:
    - match: '(\.|->)(~?{{identifier}})(?=\s*\()'
      scope: meta.method-call.c++
      captures:
        1: punctuation.accessor.c++
        2: variable.function.member.c++
      push:
        - meta_content_scope: meta.method-call.c++
        - match: '\('
          scope: punctuation.definition.parameters.c++
          set:
            - meta_content_scope: meta.method-call.c++
            - match: '\)'
              scope: meta.method-call.c++ punctuation.definition.parameters.c++
              pop: true
            - include: expressions
    - match: '(\.|->)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.c++
        2: variable.other.readwrite.member.c++

  typedef:
    - match: \btypedef\b
      scope: storage.type.c++
      push:
        - match: ({{identifier}})?\s*;
          captures:
            1: entity.name.type.typedef.c++
          pop: true
        - match: \b(struct)\s+({{identifier}})\b
          captures:
            1: storage.type.c++
        - include: expressions

  identifiers:
    - match: '{{identifier}}(::)'
      captures:
        1: punctuation.accessor.c++
    - match: '(::)?{{identifier}}'
      captures:
        1: punctuation.accessor.c++

  global:
    - include: preprocessor-expressions
    - match: '(?=\btemplate\b)'
      push:
        - include: template
        - match: (?=\S)
          set: global-modifier
    - include: keywords-angle-brackets
    - match: '(?={{path}}\s*<)'
      push: global-modifier
    - include: early-expressions
    - include: namespace
    - match: ^\s*\b(extern)(?=\s+"C")
      scope: storage.modifier.c++
      push:
        - include: strings
        - match: '\{'
          scope: punctuation.definition.block.c++
          set:
            - meta_scope: meta.extern-c.c++
            - match: '\}'
              scope: punctuation.definition.block.c++
              pop: true
            - include: global
        - match: (?=\S)
          set: global-modifier
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  global-modifier:
    - include: comments
    - match: \b({{modifiers}})\b
      scope: storage.modifier.c++
    # Constructors and destructors don't have a type
    - match: '(?={{path}}::{{identifier}}\s*(\(|$))'
      set:
        - meta_content_scope: entity.name.function.constructor.c++
        - include: identifiers
        - match: '~{{identifier}}'
        - match: '(?=\W)'
          set: function-definition-params
    - match: '(?={{path}}::~{{identifier}}\s*(\(|$))'
      set:
        - meta_content_scope: entity.name.function.destructor.c++
        - include: identifiers
        - match: '~{{identifier}}'
        - match: '(?=\W)'
          set: function-definition-params
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: '(?={{path}}\s*\()'
      pop: true
    - match: '(?=\b({{control_keywords}}|{{operator_keywords}}|{{casts}}|{{memory_operators}}|{{other_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    - match: '({{before_tag}})\s+(?=(?!{{before_tag}}){{path}}\s*[*&]?\s+{{identifier}})'
      captures:
        1: storage.type.c++
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/class
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{casts}})\b\s*<)'
      pop: true
    - include: generic-type
    - include: types
    - include: variables
    - include: constants
    - include: identifiers
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*|&
      scope: keyword.operator.c++
    - match: '{{type_qualifier}}'
      scope: storage.modifier.c++
    - include: generic-type
    - include: types
    - include: modifiers
    # Operator overloading
    - match: '({{path}}::)?{{operator_method_name}}(?=\s*(\(|$))'
      scope: entity.name.function.c++
      set: function-definition-params
    # Identifier that is not the function name - likely a macro or type
    - match: '(?={{path}}([ \t]+|[*&])(?!\s*(\(|$)))'
      push:
        - include: identifiers
        - match: ''
          pop: true
    # Real function definition
    - match: '(?={{path}}\s*(\(|$))'
      set: [function-definition-params, global-function-identifier]
    - match: '(?=\S)'
      pop: true

  global-function-identifier:
    - meta_content_scope: meta.function.c++ entity.name.function.c++
    - include: identifiers
    - match: ''
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.c++
    - include: comments
    - match: \(
      scope: punctuation.definition.parameters.c++
      set:
        - meta_content_scope: meta.function.c++
        - match : \)
          scope: punctuation.definition.parameters.c++
          set: function-definition-continue
        - include: expressions

  function-definition-continue:
    - meta_content_scope: meta.function.c++
    - include: comments
    - match: ';'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.c++
    - match: (=)\s*(0)
      captures:
        1: keyword.operator.assignment.c++
        2: constant.numeric.c++
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.c++ meta.block.c++
    - match: '\{'
      scope: punctuation.definition.block.c++
      set:
        - meta_content_scope: meta.function.c++ meta.block.c++
        - match: '\}'
          scope: meta.function.c++ meta.block.c++ punctuation.definition.block.c++
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  data-structures:
    - match: '\bclass\b'
      scope: storage.type.c++
      set: data-structures-class-definition
    - match: '\bstruct\b'
      scope: storage.type.c++
      set: data-structures-struct-definition
    - match: '\benum(\s+(class|struct))?\b'
      scope: storage.type.c++
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.c++
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-class-definition:
    - meta_scope: meta.class.c++
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}\s*(?=;)'
      scope: entity.name.class.forward-decl.c++
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.class.c++
    - include: data-structures-definition-common-end
    - match: '\{'
      scope: meta.block.c++ punctuation.definition.block.c++
      set:
        - meta_content_scope: meta.class.c++ meta.block.c++
        - match: '\}'
          scope: meta.class.c++ meta.block.c++ punctuation.definition.block.c++
          pop: true
        - include: data-structures-body

  data-structures-struct-definition:
    - meta_scope: meta.struct.c++
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}\s*(?=;)'
      scope: entity.name.struct.forward-decl.c++
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.struct.c++
    - include: data-structures-definition-common-end
    - match: '\{'
      scope: meta.block.c++ punctuation.definition.block.c++
      set:
        - meta_content_scope: meta.struct.c++ meta.block.c++
        - match: '\}'
          scope: meta.struct.c++ meta.block.c++ punctuation.definition.block.c++
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.c++
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}\s*(?=;)'
      scope: entity.name.enum.forward-decl.c++
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.enum.c++
    - include: data-structures-definition-common-end
    - match: '\{'
      scope: meta.block.c++ punctuation.definition.block.c++
      set:
        - meta_content_scope: meta.enum.c++ meta.block.c++
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.c++ meta.block.c++ punctuation.definition.block.c++
          pop: true
        - include: expressions

  data-structures-union-definition:
    - meta_scope: meta.union.c++
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}\s*(?=;)'
      scope: entity.name.union.forward-decl.c++
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.union.c++
    # Unions don't support base classes
    - match: '(?=;)'
      pop: true
    - include: angle-brackets
    - match: '\{'
      scope: meta.block.c++ punctuation.definition.block.c++
      set:
        - meta_content_scope: meta.union.c++ meta.block.c++
        - match: '\}'
          scope: meta.union.c++ meta.block.c++ punctuation.definition.block.c++
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - include: modifiers

  data-structures-definition-common-end:
    - include: angle-brackets
    - match: ':'
      scope: punctuation.separator.c++
      push:
        - include: comments
        - include: modifiers
        - match: '\b(virtual|{{visibility_modifiers}})\b'
          scope: storage.modifier.c++
        - match: (?={{path}})
          push:
            - meta_scope: entity.other.inherited-class.c++
            - include: identifiers
            - match: ''
              pop: true
        - include: angle-brackets
        - match: (?=\{)
          pop: true
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: comments
    - match: '(?=\btemplate\b)'
      push:
        - include: template
        - match: (?=\S)
          set: data-structures-modifier
    - match: \b({{visibility_modifiers}})\s*(:)(?!:)
      captures:
        1: storage.modifier.c++
        2: punctuation.section.class.c++
    - match: '^\s*(?=~?\w+)'
      push: data-structures-modifier
    - include: typedef
    - include: preprocessor-expressions
    - include: expressions

  data-structures-modifier:
    - include: comments
    - match: \b({{modifiers}})\b
      scope: storage.modifier.c++
    # Destructor
    - match: '(~{{identifier}})(?=\s*(\(|$))'
      scope: meta.method.c++ entity.name.function.destructor.c++
      set: method-definition-params
    # Constructor
    - match: '((?!{{before_tag}}|template){{identifier}})(?=\s*(\(|$))'
      scope: meta.method.c++ entity.name.function.constructor.c++
      set: method-definition-params
    # Long form constructor/destructor
    - match: '({{identifier}}(::){{identifier}})(?=\s*(\(|$))'
      captures:
        1: meta.method.c++ entity.name.function.constructor.c++
        2: punctuation.accessor.c++
      push: method-definition-params
    - match: '({{identifier}}(::)~{{identifier}})(?=\s*(\(|$))'
      captures:
        1: meta.method.c++ entity.name.function.destructor.c++
        2: punctuation.accessor.c++
      push: method-definition-params
    - match: '(?=\S)'
      set: data-structures-type

  data-structures-type:
    - include: comments
      # Cast methods
    - match: '(operator)\s+({{identifier}})(?=\s*(\(|$))'
      captures:
        1: keyword.control.c++
        2: entity.name.function.c++
      set: method-definition-params
    - match: '(?=\b({{control_keywords}}|{{operator_keywords}}|{{casts}}|{{memory_operators}}|{{other_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: data-structures-maybe-method
    - match: '({{before_tag}})\s+(?={{path}}\s*[*&]?\s+{{identifier}})'
      captures:
        1: storage.type.c++
      set: data-structures-maybe-method
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/class
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{casts}})\b\s*<)'
      pop: true
    - include: generic-type
    - include: types
    - include: variables
    - include: constants
    - include: identifiers
    - match: (?=[&*])
      set: data-structures-maybe-method
    - match: (?=\W)
      pop: true

  data-structures-maybe-method:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*|&
      scope: keyword.operator.c++
    - match: '{{type_qualifier}}'
      scope: storage.modifier.c++
    - include: generic-type
    - include: types
    - include: modifiers
    # Operator overloading
    - match: '{{operator_method_name}}(?=\s*(\(|$))'
      scope: entity.name.function.c++
      set: method-definition-params
    # Identifier that is not the function name - likely a macro or type
    - match: '(?={{path}}((?!\s*(\(|$))\s+|[*&]))'
      push:
        - include: identifiers
        - match: ''
          pop: true
    # Real function definition
    - match: '(?={{path}}\s*(\(|$))'
      set: [method-definition-params, data-structures-function-identifier]
    - match: '(?=\S)'
      pop: true

  data-structures-function-identifier:
    - meta_content_scope: meta.function.c++ entity.name.function.c++
    - include: identifiers
    - match: ''
      pop: true

  method-definition-params:
    - meta_content_scope: meta.method.c++
    - include: comments
    - match: \(
      scope: punctuation.definition.parameters.c++
      set:
        - meta_content_scope: meta.method.c++
        - match : \)
          scope: punctuation.definition.parameters.c++
          set: method-definition-continue
        - include: expressions
    - match: '(?=\S)'
      pop: true

  method-definition-continue:
    - meta_content_scope: meta.method.c++
    - include: comments
    - match: ';'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.c++
    - match: (=)\s*(0)
      captures:
        1: keyword.operator.assignment.c++
        2: constant.numeric.c++
    - match: (=)\s*(default|delete)
      captures:
        1: keyword.operator.assignment.c++
        2: storage.modifier.c++
    - match: ':'
      scope: punctuation.separator.initializer-list.c++
      push:
        - meta_scope: meta.class.constructor.initializer-list.c++
        - match: '(?=\{|;)'
          pop: true
        - match: '({{identifier}})\s*(\()'
          captures:
            1: variable.other.readwrite.member.c++
            2: punctuation.definition.parameters.c++
          push:
            - match: \)
              scope: punctuation.definition.parameters.c++
              pop: true
            - include: expressions
        - include: expressions
    - match: '(?=\{)'
      set: method-definition-body
    - match: '(?=\S)'
      pop: true

  method-definition-body:
    - meta_content_scope: meta.method.c++ meta.block.c++
    - match: '\{'
      scope: punctuation.definition.block.c++
      set:
        - meta_content_scope: meta.method.c++ meta.block.c++
        - match: '\}'
          scope: meta.method.c++ meta.block.c++ punctuation.definition.block.c++
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  statements:
    - include: preprocessor-statements
    - include: preprocessor-expressions
    - include: expressions

  parens:
    - match: \(
      scope: punctuation.definition.parameters.c++
      push:
        - meta_scope: meta.parens.c++
        - match: \)
          scope: punctuation.definition.parameters.c++
          pop: true
        - include: expressions

  attribute:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.c++
        2: punctuation.definition.parameters.c++
      push :
        - meta_scope: meta.attribute.c++
        - include: parens
        - include: strings
        - match: \)\)
          scope: punctuation.definition.parameters.c++
          pop: true

  disabled:
    - match: ^\s*#\s*if(n?def)?\b
      comment: eat nested preprocessor if(def)s
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.c++
          pop: true
        - include: disabled
        - include: pragma-mark

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*(#(if)\s+(0)\b)
      captures:
        1: meta.preprocessor.c++
        2: keyword.control.import.c++
        3: constant.numeric.preprocessor.c++
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.c++
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.else.c++
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: disabled
            - include: pragma-mark

  preprocessor-rule-enabled-global:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.c++
        2: keyword.control.import.c++
        3: constant.numeric.preprocessor.c++
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.c++
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.else.c++
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*#\s*(if|ifdef|ifndef)\b
      captures:
        1: keyword.control.import.c++
      push:
        - meta_scope: meta.preprocessor.c++
        - include: line-continuation
        - include: comments
        - match: \bdefined\b
          scope: keyword.control.c++
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*#\s*(endif)\b
      captures:
        1: keyword.control.import.c++
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.definition.block.c++
      set: preprocessor-block-if-branch-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.c++
    - match: ^\s*#\s*(endif)\b
      captures:
        1: keyword.control.import.c++
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.definition.block.c++
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.c++
    - match: ^\s*#\s*(if|ifdef|ifndef)\b
      captures:
        1: keyword.control.import.c++
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.definition.block.c++
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*#\s*(endif)\b
      captures:
        1: keyword.control.import.c++
      pop: true
    - match: \}
      scope: punctuation.definition.block.c++
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*(endif)\b)
      pop: true
    - include: negated-block
    - include: global

  preprocessor-rule-disabled-statements:
    - match: ^\s*(#(if)\s+(0)\b)
      captures:
        1: meta.preprocessor.c++
        2: keyword.control.import.c++
        3: constant.numeric.preprocessor.c++
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.c++
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.else.c++
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: disabled
            - include: pragma-mark

  preprocessor-rule-enabled-statements:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.c++
        2: keyword.control.import.c++
        3: constant.numeric.preprocessor.c++
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.c++
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c++
            2: keyword.control.import.else.c++
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*#\s*(if|ifdef|ifndef)\b
      captures:
        1: keyword.control.import.c++
      push:
        - meta_scope: meta.preprocessor.c++
        - include: line-continuation
        - include: comments
        - match: \bdefined\b
          scope: keyword.control.c++
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*#\s*(endif)\b
      captures:
        1: keyword.control.import.c++
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.definition.block.c++
      set: preprocessor-block-if-branch-statements
    - include: negated-block
    - include: statements

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.c++
    - match: ^\s*#\s*(endif)\b
      captures:
        1: keyword.control.import.c++
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.definition.block.c++
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.c++
    - match: ^\s*#\s*(if|ifdef|ifndef)\b
      captures:
        1: keyword.control.import.c++
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.definition.block.c++
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*#\s*(endif)\b
      captures:
        1: keyword.control.import.c++
      pop: true
    - match: \}
      scope: meta.block.c++ punctuation.definition.block.c++
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*(endif)\b)
      pop: true
    - include: negated-block
    - include: statements

  negated-block:
    - match: '\}'
      scope: punctuation.definition.block.c++
      push:
        - match: '\{'
          scope: punctuation.definition.block.c++
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  pragma-mark:
    - match: ^\s*(#\s*(pragma\s+mark)\s+(.*))
      scope: meta.section
      captures:
        1: meta.preprocessor.c++
        2: keyword.control.import.pragma.c++
        3: meta.toc-list.pragma-mark.c++

  line-continuation:
    - match: (\\)$\n?
      captures:
        1: punctuation.separator.continuation.c++
    - match: \\(\s+?)(?=\n)$
      captures:
        1: invalid.illegal.space-after-continuation.c++

  preprocessor-macro-define:
    - match: ^\s*(\#\s*define)\b
      scope: keyword.control.import.define.c++
      push:
        - meta_scope: meta.preprocessor.macro.c++
        - include: line-continuation
        - match: $\n
          pop: true
        - match: '({{identifier}})(\()'
          captures:
            1: entity.name.function.preprocessor.c++
            2: punctuation.definition.parameters.c++
          set: [preprocessor-macro-definition, preprocessor-macro-params]
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.c++
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.params.macro.c++
    - match: '{{identifier}}'
      scope: variable.parameter.c++
    - match: \)
      scope: punctuation.definition.parameters.c++
      pop: true
    - match: ','
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.c++
          pop: true
        - include: line-continuation
        - match: '\.\.\.'
          scope: punctuation.definition.variadic.c++
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.c++
          captures:
            1: punctuation.definition.comment.c++
            2: punctuation.definition.comment.c++
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.c++
    - include: line-continuation
    - match: '\.\.\.'
      scope: punctuation.definition.variadic.c++
    - match: (/\*).*(\*/)
      scope: comment.block.c++
      captures:
        1: punctuation.definition.comment.c++
        2: punctuation.definition.comment.c++
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.c++

  preprocessor-macro-definition:
    - meta_scope: meta.preprocessor.macro.definition.c++
    - match: $\n
      pop: true
    - include: line-continuation
    - include: expressions

  preprocessor-other:
    - match: ^\s*#\s*(if|ifdef|ifndef|elif|else|line|pragma|undef)\b
      captures:
        1: keyword.control.import.c++
      push:
        - meta_scope: meta.preprocessor.c++
        - match: '\\$'
          scope: punctuation.separator.continuation.c++
          push:
            - match: '^'
              pop: true
        - match: (?=(?://|/\*))|$
          pop: true
        - match: \bdefined\b
          scope: keyword.control.c++
    - match: ^\s*(#\s*(endif)\b)
      captures:
        1: meta.preprocessor.c++
        2: keyword.control.import.c++
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.c++
      push:
        - meta_scope: meta.preprocessor.diagnostic.c++
        - include: line-continuation
        - match: \n|(?=//)
          pop: true
        - include: comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.c++
    - match: ^\s*#\s*(include|import)\b\s+
      captures:
        1: keyword.control.import.include.c++
      push:
        - meta_scope: meta.preprocessor.c.include
        - match: (?=(?://|/\*))|$
          captures:
            1: keyword.control.import.include.c++
          pop: true
        - match: '\\\s*\n'
          scope: punctuation.separator.continuation.c++
        - match: '"'
          scope: punctuation.definition.string.begin.c++
          push:
            - meta_scope: string.quoted.double.include.c++
            - match: '"'
              scope: punctuation.definition.string.end.c++
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.c++
          push:
            - meta_scope: string.quoted.other.lt-gt.include.c++
            - match: ">"
              scope: punctuation.definition.string.end.c++
              pop: true
